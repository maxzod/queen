"use strict";(self.webpackChunkqueen=self.webpackChunkqueen||[]).push([[164],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,y=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(y,i(i({ref:t},d),{},{components:n})):r.createElement(y,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5922:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={title:"Dependency Management",sidebar_position:2},i="Dependency Management",l={unversionedId:"locators",id:"locators",title:"Dependency Management",description:"Locators is a Service Locator to register and retrieve you dependencies without BuildContext or any thing you only need the Type for the object you want and maybe need a tag",source:"@site/docs/2_locators.md",sourceDirName:".",slug:"/locators",permalink:"/queen/docs/locators",draft:!1,editUrl:"https://github.com/FlutterQueen/queen/tree/master/docs/2_locators.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Dependency Management",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/queen/docs/intro"},next:{title:"Localization",permalink:"/queen/docs/localization"}},c={},s=[{value:"retrieve dependencies",id:"retrieve-dependencies",level:2},{value:"find",id:"find",level:3},{value:"register dependencies",id:"register-dependencies",level:2},{value:"put",id:"put",level:3},{value:"putLazy (lazyLoad dependencies)",id:"putlazy-lazyload-dependencies",level:3},{value:"factory",id:"factory",level:3},{value:"delete",id:"delete",level:2}],d={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dependency-management"},"Dependency Management"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/pacakges/locators"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"Locators")))," is a ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Service_locator_pattern"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"Service Locator")))," to register and retrieve you dependencies without ",(0,a.kt)("inlineCode",{parentName:"p"},"BuildContext")," or any thing you only need the ",(0,a.kt)("inlineCode",{parentName:"p"},"Type")," for the object you want and maybe need a tag"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"/// register\nLocators.put(AuthService());\n\n/// retrieve it\nAuthService service = Locators.find<AuthService>();\n")),(0,a.kt)("p",null,"The methods and it's configurable parameters are:"),(0,a.kt)("h2",{id:"retrieve-dependencies"},"retrieve dependencies"),(0,a.kt)("h3",{id:"find"},"find"),(0,a.kt)("p",null,"return object from any register methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"AuthService service = Locators.find<AuthService>();\n")),(0,a.kt)("h2",{id:"register-dependencies"},"register dependencies"),(0,a.kt)("h3",{id:"put"},"put"),(0,a.kt)("p",null,"create the object now and register it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"Locators.put<FooClass>(FooClass());\n")),(0,a.kt)("admonition",{title:"use tag if you need to put or find 2 objects of the same type",type:"tip"}),(0,a.kt)("h3",{id:"putlazy-lazyload-dependencies"},"putLazy (lazyLoad dependencies)"),(0,a.kt)("p",null,"register a factory to create the object once when it first time needed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"}," Locators.putLazy<FooClass>((){\n  // this method will not be called until you need a object from `FooClass` and it will be called once\n  return FooClass();\n });\n")),(0,a.kt)("p",null,"This is all options you can set when using lazyPut:"),(0,a.kt)("h3",{id:"factory"},"factory"),(0,a.kt)("p",null,"register a factory to create ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"NEW"))," object every time it is needed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"}," Locators.factory<FooClass>((){\n  // this method will not be called until you need a object from `FooClass`\n  // and it will be called Every time you call Locators.find<FooClass>()\n  return FooClass();\n });\n")),(0,a.kt)("h2",{id:"delete"},"delete"),(0,a.kt)("p",null,"To remove an instance/factory from Locators:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"Locators.delete<FooClass>();\n")))}p.isMDXComponent=!0}}]);