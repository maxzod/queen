"use strict";(self.webpackChunkqueen=self.webpackChunkqueen||[]).push([[253],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>h});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},u=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(r),h=o,f=d["".concat(c,".").concat(h)]||d[h]||p[h]||a;return r?t.createElement(f,l(l({ref:n},u),{},{components:r})):t.createElement(f,l({ref:n},u))}));function h(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2818:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var t=r(7462),o=(r(7294),r(3905));const a={title:"Lunchers"},l="Launchers",i={unversionedId:"launchers",id:"launchers",title:"Lunchers",description:"Introduction",source:"@site/docs/9_launchers.md",sourceDirName:".",slug:"/launchers",permalink:"/queen/docs/launchers",draft:!1,editUrl:"https://github.com/FlutterQueen/queen/tree/master/docs/9_launchers.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Lunchers"},sidebar:"tutorialSidebar",previous:{title:"lighthouse (CLI)",permalink:"/queen/docs/cli"},next:{title:"Pipes",permalink:"/queen/docs/pipes"}},c={},s=[{value:"One , register dependencies",id:"one--register-dependencies",level:2},{value:"Two , Boot dependencies",id:"two--boot-dependencies",level:2},{value:"shouldRunInParallel",id:"shouldruninparallel",level:2}],u={toc:s};function p(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"launchers"},"Launchers"),(0,o.kt)("p",null,"Introduction\nLaunchers are the way queen organize the process of register dependencies and bootstrap for Queen . Your own application, and other developers services, are"),(0,o.kt)("p",null,"Launchers helps to organize two things"),(0,o.kt)("h2",{id:"one--register-dependencies"},"One , register dependencies"),(0,o.kt)("p",null,"In general, we mean registering things, including registering services, controllers, other packages dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"\nclass ThemeLauncher extends Launcher {\n\n  @override\n  void register() {\n    Locators.put(ThemeService());\n  }\n\n}\n")),(0,o.kt)("h2",{id:"two--boot-dependencies"},"Two , Boot dependencies"),(0,o.kt)("p",null,"to bootstrap feature like themes , localization ..etc ",(0,o.kt)("inlineCode",{parentName:"p"},"boot")," will be called before the application run"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"\nclass ThemeLauncher extends Launcher {\n\n  @override\n  FutureOr<void> boot() async => find<ThemeController>().boot();\n\n}\n\n\n")),(0,o.kt)("h2",{id:"shouldruninparallel"},"shouldRunInParallel"),(0,o.kt)("p",null,"if ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," the Launcher boot will called after the previous one is done\nif ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," will boot in parallel with other Launchers (apps boot faster)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"\nclass ThemeLauncher extends Launcher {\n\n  @override\n  bool get shouldRunInParallel => true;\n\n}\n\n\n")))}p.isMDXComponent=!0}}]);